{"version":3,"sources":["leaf_chunk.js"],"names":["define","Evented","plain","LeafChunk","inherit","klassName","_construct","lines","this","parent","i","height","length","chunkSize","removeInner","at","n","e","line","cleanUpLine","emit","splice","collapse","push","apply","insertInner","slice","concat","iterN","op"],"mappings":";;;;;;;AAAAA,QACE,wBACA,WACA,SAASC,EAAQC,GAGjB,IAAIC,EAAYF,EAAQG,SACtBC,UAAY,YAEZC,WAAc,SAASC,GACrBC,KAAKD,MAAQA,EACbC,KAAKC,OAAS,KACd,IAAK,IAAIC,EAAI,EAAGC,EAAS,EAAGD,EAAIH,EAAMK,SAAUF,EAC9CH,EAAMG,GAAGD,OAASD,KAClBG,GAAUJ,EAAMG,GAAGC,OAErBH,KAAKG,OAASA,GAGhBE,UAAW,WACT,OAAOL,KAAKD,MAAMK,QAIpBE,YAAa,SAASC,EAAIC,GACxB,IAAK,IAAIN,EAAIK,EAAIE,EAAIF,EAAKC,EAAGN,EAAIO,IAAKP,EAAG,CACvC,IAAIQ,EAAOV,KAAKD,MAAMG,GACtBF,KAAKG,QAAUO,EAAKP,OACpBO,EAAKC,cAELX,KAAKY,KAAK,SAASF,GAErBV,KAAKD,MAAMc,OAAON,EAAIC,IAIxBM,SAAU,SAASf,GACjBA,EAAMgB,KAAKC,MAAMjB,EAAOC,KAAKD,QAK/BkB,YAAa,SAASV,EAAIR,EAAOI,GAC/BH,KAAKG,QAAUA,EACfH,KAAKD,MAAQC,KAAKD,MAAMmB,MAAM,EAAGX,GAAIY,OAAOpB,GAAOoB,OAAOnB,KAAKD,MAAMmB,MAAMX,IAC3E,IAAK,IAAIL,EAAI,EAAGA,EAAIH,EAAMK,SAAUF,EAClCH,EAAMG,GAAGD,OAASD,MAKtBoB,MAAO,SAASb,EAAIC,EAAGa,GACrB,IAAK,IAAIZ,EAAIF,EAAKC,EAAGD,EAAKE,IAAKF,EAC7B,GAAIc,EAAGrB,KAAKD,MAAMQ,IAChB,OAAO,KAKf,OAAQb,EAAMC,UAAYA","file":"../leaf_chunk.js","sourcesContent":["define([\r\n  \"skylark-langx/Evented\",\r\n  \"./plain\"\r\n],function(Evented,plain){\r\n  // Original: model/chunk.js\r\n\r\n  var LeafChunk = Evented.inherit({\r\n    klassName : \"LeafChunk\",\r\n\r\n    _construct :  function(lines) {\r\n      this.lines = lines;\r\n      this.parent = null;\r\n      for (var i = 0, height = 0; i < lines.length; ++i) {\r\n        lines[i].parent = this;\r\n        height += lines[i].height;\r\n      }\r\n      this.height = height;\r\n    },\r\n\r\n    chunkSize: function() { \r\n      return this.lines.length; \r\n    },\r\n    \r\n    // Remove the n lines at offset 'at'.\r\n    removeInner: function(at, n) {\r\n      for (var i = at, e = at + n; i < e; ++i) {\r\n        var line = this.lines[i];\r\n        this.height -= line.height;\r\n        line.cleanUpLine();\r\n        //signalLater(line, \"delete\");\r\n        this.emit(\"delete\",line)\r\n      }\r\n      this.lines.splice(at, n);\r\n    },\r\n\r\n    // Helper used to collapse a small branch into a single leaf.\r\n    collapse: function(lines) {\r\n      lines.push.apply(lines, this.lines);\r\n    },\r\n\r\n    // Insert the given array of lines at offset 'at', count them as\r\n    // having the given height.\r\n    insertInner: function(at, lines, height) {\r\n      this.height += height;\r\n      this.lines = this.lines.slice(0, at).concat(lines).concat(this.lines.slice(at));\r\n      for (var i = 0; i < lines.length; ++i) {\r\n        lines[i].parent = this;\r\n      }\r\n    },\r\n\r\n    // Used to iterate over a part of the tree.\r\n    iterN: function(at, n, op) {\r\n      for (var e = at + n; at < e; ++at)\r\n        if (op(this.lines[at])) {\r\n          return true;\r\n        }\r\n    }\r\n  });\r\n\r\n  return  plain.LeafChunk = LeafChunk;\r\n\r\n});"]}