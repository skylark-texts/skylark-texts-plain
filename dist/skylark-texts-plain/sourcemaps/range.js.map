{"version":3,"sources":["range.js"],"names":["define","klass","plain","Postion","Range","klassName","_construct","anchor","head","this","from","Positon","min","to","Position","max","empty","line","ch","extend","other","posBefore","compare"],"mappings":";;;;;;;AAAAA,QACE,sBACA,UACA,cACA,SAASC,EAAMC,EAAMC,GAGrB,IAAIC,EAAQH,GACVI,UAAY,QAEZC,WAAa,SAASC,EAAQC,GAC5BC,KAAKF,OAASA,EACdE,KAAKD,KAAOA,GAGdE,KAAM,WACJ,OAAOC,QAAQC,IAAIH,KAAKF,OAAQE,KAAKD,OAGvCK,GAAI,WACF,OAAOC,SAASC,IAAIN,KAAKF,OAAQE,KAAKD,OAGxCQ,MAAO,WACL,OAAOP,KAAKD,KAAKS,MAAQR,KAAKF,OAAOU,MAAQR,KAAKD,KAAKU,IAAMT,KAAKF,OAAOW,IAG3EC,OAAS,SAAqBX,EAAMY,EAAOD,GAEvC,GAAIA,EAAQ,CACV,IAAIZ,EAASE,KAAKF,OAClB,GAAIa,EAAO,CACP,IAAIC,EAAYP,SAASQ,QAAQd,EAAMD,GAAU,EAC7Cc,GAAaP,SAASQ,QAAQF,EAAOb,GAAU,GAC/CA,EAASC,EACTA,EAAOY,GACAC,GAAaP,SAASQ,QAAQd,EAAMY,GAAS,IACpDZ,EAAOY,GAGf,OAAO,IAAIhB,EAAMG,EAAQC,GAEzB,OAAO,IAAIJ,EAAMgB,GAASZ,EAAMA,MAKxC,OAAON,EAAME,MAAQA","file":"../range.js","sourcesContent":["define([\r\n  \"skylark-langx/klass\",\r\n  \"./plain\",\r\n  \"./position\"\r\n],function(klass,plain,Postion) {\r\n  // Original: model/selection.js\r\n  \r\n  var Range = klass({\r\n    klassName : \"Range\",\r\n\r\n    _construct : function(anchor, head) {\r\n      this.anchor = anchor; \r\n      this.head = head;\r\n    },\r\n\r\n    from: function() { \r\n      return Positon.min(this.anchor, this.head); \r\n    },\r\n    \r\n    to: function() { \r\n      return Position.max(this.anchor, this.head); \r\n    },\r\n    \r\n    empty: function() {\r\n      return this.head.line == this.anchor.line && this.head.ch == this.anchor.ch;\r\n    },\r\n\r\n    extend : function extendRange(head, other, extend) {\r\n      // moved from model/selection_updates.js\r\n        if (extend) {\r\n          let anchor = this.anchor;\r\n          if (other) {\r\n              let posBefore = Position.compare(head, anchor) < 0;\r\n              if (posBefore != Position.compare(other, anchor) < 0) {\r\n                  anchor = head;\r\n                  head = other;\r\n              } else if (posBefore != Position.compare(head, other) < 0) {\r\n                  head = other;\r\n              }\r\n          }\r\n          return new Range(anchor, head);\r\n        } else {\r\n          return new Range(other || head, head);\r\n        }\r\n    }\r\n  });\r\n\r\n  return plain.Range = Range;\r\n\r\n});\r\n"]}