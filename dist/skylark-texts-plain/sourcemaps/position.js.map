{"version":3,"sources":["position.js"],"names":["define","klass","objects","plain","Position","_construct","line","ch","sticky","this","compareTo","other","clone","thie","equals","clipToLen","linelen","compare","a","b","Postion","copy","x","max","cmp","min","equal"],"mappings":";;;;;;;AAAAA,QACE,sBACA,wBACA,WACA,SAASC,EAAMC,EAAQC,GAIvB,IAAIC,EAAWH,GACbI,WAAa,SAASC,EAAKC,EAAGC,EAAS,MACrCC,KAAKH,KAAOA,EACZG,KAAKF,GAAKA,EACVE,KAAKD,OAASA,GAEhBE,UAAY,SAASC,GACnB,OAAOA,IAAUF,KAAKH,KAAOK,EAAML,MAAQG,KAAKF,GAAKI,EAAMJ,KAG7DK,MAAQ,WACN,OAAO,IAAIR,EAASK,KAAKH,KAAKO,KAAKN,KAGrCO,OAAS,SAASH,GACd,OAAOA,GAAUF,KAAKD,QAAUG,EAAMH,QAAmC,GAAzBC,KAAKC,UAAUC,IAGnEI,UAAY,SAASC,GACjB,IAAIT,EAAKE,KAAKF,GACd,OAAU,MAANA,GAAcA,EAAKS,EACZ,IAAIZ,EAASK,KAAKH,KAAMU,GACxBT,EAAK,EACL,IAAIH,EAASK,KAAKH,KAAM,GAExBG,QA2BjB,OApBAL,EAASa,QAAU,SAAaC,EAAGC,GACjC,OAAOD,EAAER,UAAUS,IAGrBC,QAAQC,KAAO,SAAiBC,GAC9B,OAAOA,EAAEV,SAGXR,EAASmB,IAAM,SAAgBL,EAAGC,GAChC,OAAOK,IAAIN,EAAGC,GAAK,EAAIA,EAAID,GAG7Bd,EAASqB,IAAM,SAAgBP,EAAGC,GAChC,OAAOK,IAAIN,EAAGC,GAAK,EAAID,EAAIC,GAG7Bf,EAASsB,MAAQ,SAAwBR,EAAEC,GACzC,OAAOD,GAAKA,EAAEJ,OAAOK,IAGhBhB,EAAMC,SAAWA","file":"../position.js","sourcesContent":["define([\r\n  \"skylark-langx/klass\",\r\n  \"skylark-langx/objects\",\r\n  \"./plain\"\r\n],function(klass,objects,plain) {\r\n  // POSITION OBJECT (original : line/pos.js)\r\n\r\n  // A Position instance represents a position within the text.\r\n  var Position = klass({\r\n    _construct : function(line,ch,sticky = null) {\r\n      this.line = line; \r\n      this.ch = ch;\r\n      this.sticky = sticky;\r\n    },\r\n    compareTo : function(other) {\r\n      return other && (this.line - other.line || this.ch - other.ch); \r\n    },\r\n\r\n    clone : function() {\r\n      return new Position(this.line,thie.ch);\r\n    },\r\n\r\n    equals : function(other) {\r\n        return other && (this.sticky == other.sticky && this.compareTo(other) == 0);    \r\n    },\r\n\r\n    clipToLen : function(linelen) {\r\n        let ch = this.ch;\r\n        if (ch == null || ch > linelen) {\r\n            return new Position(this.line, linelen);          \r\n        } else if (ch < 0) {\r\n            return new Position(this.line, 0);\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n  });\r\n\r\n  // Compare two positions, return 0 if they are the same, a negative\r\n  // number when a is less, and a positive number otherwise.\r\n  Position.compare = function cmp(a, b) { \r\n    return a.compareTo(b);\r\n  };\r\n\r\n  Postion.copy = function copyPos(x) {\r\n    return x.clone();\r\n  }\r\n\r\n  Position.max = function maxPos(a, b) { \r\n    return cmp(a, b) < 0 ? b : a; \r\n  };\r\n\r\n  Position.min = function minPos(a, b) { \r\n    return cmp(a, b) < 0 ? a : b; \r\n  };\r\n\r\n  Position.equal = function equalCursorPos(a,b) {\r\n    return a && a.equals(b);\r\n  };\r\n\r\n  return plain.Position = Position;\r\n\r\n});\r\n"]}